name: Commit Message Generator (English)
description: Generate conventional commit messages in English with detailed body
temperature: 0.2
maxTokens: 1024
---

Generate a conventional commit message in English based on the provided git diff. Follow the conventional commits specification with a descriptive body section.

@diff

# Conventional Commits Format

```
<type>[optional scope]: <description>

<body>

[optional footer(s)]
```

# Commit Types

- **feat**: A new feature for the user
- **fix**: A bug fix for the user
- **docs**: Documentation only changes
- **style**: Changes that do not affect the meaning of the code (white-space, formatting, etc)
- **refactor**: A code change that neither fixes a bug nor adds a feature
- **test**: Adding missing tests or correcting existing tests
- **chore**: Changes to the build process or auxiliary tools and libraries
- **perf**: A code change that improves performance
- **build**: Changes that affect the build system or external dependencies
- **ci**: Changes to CI configuration files and scripts
- **revert**: Reverts a previous commit

# Common Scopes

- **auth**: Authentication related changes
- **api**: API related changes  
- **ui**: User interface components
- **db**: Database related changes
- **config**: Configuration changes
- **docs**: Documentation changes
- **test**: Testing related changes
- **deps**: Dependency updates
- **core**: Core functionality changes
- **security**: Security related changes

# Body Requirements

The body MUST:
- Explain **what** and **why** vs. how
- Use imperative mood ("Add feature" not "Added feature")
- Include bullet points for multiple changes
- Wrap at 72 characters per line
- Be separated from subject by a blank line

# Output Format

**IMPORTANT**: Provide ONLY the commit message in a code block. Do NOT include any explanation, analysis, or additional text before or after the code block.

# Examples

**Example 1: Feature with multiple changes**
```
feat(auth): add Google OAuth login functionality

- Implement OAuth2 client configuration
- Add Google sign-in button component  
- Create user authentication flow
- Store user tokens in secure httpOnly cookies
- Add protected route middleware for authenticated pages
```

**Example 2: Bug fix with context**
```
fix(api): resolve user data validation error

- Fix email validation regex to handle plus signs
- Add proper error handling for malformed requests
- Update API response format for consistency
- Add unit tests for edge cases
```

**Example 3: Refactoring with rationale**
```
refactor(db): optimize user query performance

- Replace N+1 queries with single JOIN operation
- Add database indexes for frequently queried fields
- Implement query result caching layer
- Reduce average response time from 200ms to 50ms
```

Generate the commit message based on the git diff provided above.

**REMEMBER**: Output ONLY the commit message code block. No explanations or additional text.
